{"version":3,"sources":["components/profile/Profile.module.css","components/transactions/Transactions.module.css","components/statistic/Statistic.module.css","components/friends/Friends.module.css","components/profile/Profile.js","components/statistic/Statistic.js","components/friends/Friends.js","components/transactions/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","name","tag","location","avatar","stats","className","styles","wrapperer","wrapper","container","src","alt","list","item","label","quantity","followers","views","likes","Statistic","title","stat","statistics","map","el","key","id","percentage","Friends","elements","friends","isOnline","divClass","active","disabled","width","TransactionHistory","items","transactionHistory","thead","th","tr","td","type","amount","currency","App","user","transactions","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d212031c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Profile_list__3dbdS\",\"name\":\"Profile_name__98pkZ\",\"location\":\"Profile_location__3wN9J\",\"wrapperer\":\"Profile_wrapperer__17RA8\",\"avatar\":\"Profile_avatar__W6nx7\",\"container\":\"Profile_container__3ZBCA\",\"wrapper\":\"Profile_wrapper__1kgyn\",\"item\":\"Profile_item__jxixt\",\"label\":\"Profile_label__3DCyD\",\"quantity\":\"Profile_quantity__lV2jl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thead\":\"Transactions_thead__9IXtY\",\"transactionHistory\":\"Transactions_transactionHistory__1SZ_s\",\"th\":\"Transactions_th__2XZsd\",\"td\":\"Transactions_td__2xzPc\",\"tr\":\"Transactions_tr__q-f0U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Statistic_container__1KjGj\",\"statistics\":\"Statistic_statistics__Tk4Ff\",\"list\":\"Statistic_list__1lpw2\",\"item\":\"Statistic_item__3k1uN\",\"title\":\"Statistic_title__w0X6K\",\"label\":\"Statistic_label__x8Gc-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friends_item__2Rrrn\",\"avatar\":\"Friends_avatar__2S0AR\",\"name\":\"Friends_name__5gIRB\",\"active\":\"Friends_active__2IZFP\",\"disabled\":\"Friends_disabled__2D6Sf\",\"list\":\"Friends_list__9zfht\"};","import React from 'react';\r\nimport styles from './Profile.module.css'\r\n\r\nconst Profile = ({name, tag, location, avatar, stats}) => (\r\n    <div className = {styles.wrapperer}>\r\n        <div className = {styles.wrapper}>\r\n            <div className = {styles.container}>\r\n                <img\r\n                src={avatar}\r\n                alt=\"user avatar\"\r\n                className={styles.avatar}\r\n                />\r\n                <p className={styles.name}>{name}</p>\r\n                <p className={styles.tag}>{tag}</p>\r\n                <p className={styles.location}>{location}</p>\r\n            </div>\r\n            <ul className = {styles.list}>\r\n                <li className = {styles.item}>\r\n                    <span className={styles.label}>followers</span>\r\n                    <span className={styles.quantity}>{stats.followers}</span>\r\n                </li>\r\n                <li className = {styles.item}>\r\n                    <span className={styles.label}>views</span>\r\n                    <span className={styles.quantity}>{stats.views}</span>\r\n                </li>\r\n                <li className = {styles.item}>\r\n                    <span className={styles.label}>likes</span>\r\n                    <span className={styles.quantity}>{stats.likes}</span>\r\n                </li>\r\n            </ul>\r\n        </div>  \r\n    </div>\r\n)\r\n\r\nexport default Profile","import React from 'react';\r\nimport styles from './Statistic.module.css'\r\n\r\nconst Statistic = ({title, stat}) => (\r\n    <div className = {styles.container}>\r\n        <section className={styles.statistics}>\r\n            <h2 className={styles.title}>{title}</h2>\r\n\r\n            <ul className={styles.list}>\r\n                {stat.map(el => (\r\n                <li key = {el.id} className = {styles.item}>\r\n                    <span className = {styles.label}>{el.label}</span>\r\n                    <span className = 'percentage'>{el.percentage}</span>\r\n                </li>\r\n                ))}\r\n            </ul>\r\n        </section>\r\n    </div>\r\n)\r\n\r\nexport default Statistic","import React from 'react';\r\nimport styles from './Friends.module.css'\r\n\r\nconst Friends = ({friends}) => {\r\n\r\n    const elements = friends.map(el => {\r\n        const {avatar, name, isOnline, id} = el\r\n\r\n        const divClass = isOnline ? styles.active : styles.disabled;\r\n\r\n        return(\r\n            <li key = {id} className = {styles.item}>\r\n                <div className = {divClass}></div>\r\n                <img className={styles.avatar} src={avatar} alt=\"\" width=\"96\" />\r\n                <p className={styles.name}>{name}</p>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <ul className = {styles.list}>\r\n            {elements}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Friends","import React from 'react';\r\nimport styles from './Transactions.module.css'\r\n\r\nconst TransactionHistory = ({items}) => (\r\n    <table className={styles.transactionHistory}>\r\n        <thead className = {styles.thead}>\r\n            <tr>\r\n                <th className = {styles.th}>Type</th>\r\n                <th className = {styles.th}>Amount</th>\r\n                <th className = {styles.th}>Currency</th>\r\n            </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n            {items.map(el => (\r\n                <tr key = {el.id} className = {styles.tr}>\r\n                    <td className = {styles.td}>{el.type}</td>\r\n                    <td className = {styles.td}>{el.amount}</td>\r\n                    <td className = {styles.td}>{el.currency}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n)\r\n\r\nexport default TransactionHistory","import React from 'react';\r\nimport user from './components/profile/user.json'\r\nimport Profile from './components/profile/Profile'\r\nimport stat from './components/statistic/statistic-data.json'\r\nimport Statistic from './components/statistic/Statistic'\r\nimport friends from './components/friends/friends.json'\r\nimport Friends from './components/friends/Friends'\r\nimport transactions from './components/transactions/transactions.json'\r\nimport TransactionHistory from './components/transactions/Transactions'\r\n\r\nconst App = () => (\r\n    <div>\r\n        <Profile\r\n    name = {user.name}\r\n    tag = {user.tag}\r\n    location = {user.location}\r\n    avatar = {user.avatar}\r\n    stats = {user.stats}\r\n    />\r\n    <Statistic\r\n    title = 'Upload stats'\r\n    stat = {stat}    \r\n    />\r\n    <Friends friends = {friends}/>\r\n    <TransactionHistory items = {transactions}/>\r\n    </div>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}